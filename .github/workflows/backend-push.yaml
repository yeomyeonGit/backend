# display name
name: Docker Push Image

# trigger
on:
  push:
    branches: ["main"]   # main 브랜치에서 push가 발생됐을 때
  
jobs:
  # 1. runner(os) 설치
  build-and-push:
    runs-on: ubuntu-latest

    # job 안에서 실행되는 것 명시
    steps:
      # action 정의 - checkout: 코드를 내려 받는다
      - name: java checkout code
        uses: actions/checkout@v3
      
      # jdk 설치
      - name: setup jdk
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
      
      # 권한도 설정: 모든 권한
      - name: grant permission
        run: chmod +x gradlew

      # 패킹
      - name: build jar
        # 기존에 있는 jar를 없애고 새로 패킹해줌.
        # 문제) 지금 환경은 리눅스 환경이라서 권한이 필요함. 지금은 권한을 정상적으로 부여받지 못해서 permission 오류 생김
        # linux chmod
        run: ./gradlew clean build bootJar

      - name: docker build    # docker desktop 깔기
        uses: docker/setup-buildx-action@v3
      
      - name: docker login    # docker hub에 로그인
        uses: docker/login-action@v3    # 버전 확인 잘 하기
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}   # docker 사용자명
          password: ${{ secrets.DOCKERHUB_TOKEN }}    # docker 토큰

      
      # 실행
      # 쉘스크립트로 원격 서버에 접근

      # 1. docker 이미지 생성
      - name: docker image
        # git action이 아니라 docker 명령어
        run: docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/siat-git-action-backend:latest . 
      # 2. docker push: docker hub로 이미지를 업로드
      - name: docker push
        run: docker push ${{ secrets.DOCKERHUB_USERNAME }}/siat-git-action-backend:latest
      
      # aws EC2 서버 연결
      - name: Write docker-compose.yml on EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}    # 엔드포인트
          username: ${{ secrets.SSH_USERNAME }}    # ubuntu
          key: ${{ secrets.SSH_KEY }}      # pem 키
          script: |
            mkdir -p /home/ubuntu/backend
            cat << 'EOF' > /home/ubuntu/backend/docker-compose.yml
            services:
              app:
                image: ${{ secrets.DOCKERHUB_USERNAME }}/siat-git-action-backend:latest
                ports:
                  - "8808:8088"
                restart: always
            EOF

      - name: Deploy docker-compose
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.SSH_HOST }}   # ec2 서버의 엔드포인트
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            cd /home/ubuntu/backend
            echo "컨테이너 중지"
            docker compose down
            echo "이미지 삭제"
            docker image prune -af
            docker compose pull ${{ secrets.DOCKERHUB_USERNAME }}/siat-git-action-backend:latest
            docker compose up -d

            
      
    
